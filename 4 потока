#include <stdio.h>
#include <pthread.h>
#include <time.h>

#define NUM_THREADS 4
#define WORK_DURATION 1000000000 // Продолжительность работы потока

// Функция, которую будут выполнять потоки
void *performWork(void *threadID) {
    long tid = (long)threadID;

    // Выполнение работы потока
    for (long i = 0; i < WORK_DURATION; i++) {
        // Просто выполняем некоторую "тяжелую" работу для имитации времени выполнения
    }

    printf("Поток %ld завершил работу\n", tid);
    pthread_exit(NULL);
}

int main() {
    clock_t start, end;
    double timeWithThreads, timeWithoutThreads;

    pthread_t threads[NUM_THREADS];
    int rc;
    long t;

    start = clock(); // Начало отсчета времени с потоков

    // Создание потоков
    for (t = 0; t < NUM_THREADS; t++) {
        printf("Создание потока %ld\n", t);
        rc = pthread_create(&threads[t], NULL, performWork, (void *)t);

        if (rc) {
            printf("Ошибка; код возврата из pthread_create() %d\n", rc);
            return -1;
        }
    }

    // Ожидание завершения потоков
    for (t = 0; t < NUM_THREADS; t++) {
        rc = pthread_join(threads[t], NULL);

        if (rc) {
            printf("Ошибка; код возврата из pthread_join() %d\n", rc);
            return -1;
        }
    }

    end = clock(); // Конец отсчета времени с потоков
    timeWithThreads = ((double)(end - start)) / CLOCKS_PER_SEC;

    printf("Время выполнения с потоками: %f сек\n", timeWithThreads);

    // Начало отсчета времени без потоков
    start = clock();

    // Здесь можно выполнить какую-то работу без использования потоков

    end = clock(); // Конец отсчета времени без потоков
    timeWithoutThreads = ((double)(end - start)) / CLOCKS_PER_SEC;

    printf("Время выполнения без потоков: %f сек\n", timeWithoutThreads);

    return 0;
}
